/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.79
 * Generated at: 2017-08-21 06:53:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.util.*;
import java.text.DecimalFormat;
import bakery.*;

public final class MainPage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

 Statement statement;
            DecimalFormat df = new DecimalFormat("0.00");
        
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/tlds/TagLib.tld", Long.valueOf(1502879623014L));
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			"BakeryErrorPage.jsp", true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');
      bakery.DatabaseConnectionBean connect = null;
      synchronized (session) {
        connect = (bakery.DatabaseConnectionBean) _jspx_page_context.getAttribute("connect", javax.servlet.jsp.PageContext.SESSION_SCOPE);
        if (connect == null){
          connect = new bakery.DatabaseConnectionBean();
          _jspx_page_context.setAttribute("connect", connect, javax.servlet.jsp.PageContext.SESSION_SCOPE);
          out.write("\n");
          out.write("    ");
          org.apache.jasper.runtime.JspRuntimeLibrary.introspecthelper(_jspx_page_context.findAttribute("connect"), "databaseName", "jdbc:odbc:Bakery", null, null, false);
          out.write('\n');
        }
      }
      out.write('\n');
      bakery.CartBean cart = null;
      synchronized (session) {
        cart = (bakery.CartBean) _jspx_page_context.getAttribute("cart", javax.servlet.jsp.PageContext.SESSION_SCOPE);
        if (cart == null){
          cart = new bakery.CartBean();
          _jspx_page_context.setAttribute("cart", cart, javax.servlet.jsp.PageContext.SESSION_SCOPE);
        }
      }
      out.write("\n");
      out.write("<html>\n");
      out.write("    <head>\n");
      out.write("        <title>JSP Bakery</title>\n");
      out.write("    </head>\n");
      out.write("    <body style=\"background-color:lightblue\">\n");
      out.write("    <center>\n");
      out.write("        <bakery:mt:BakeryTag size=\"6\"/>\n");
      out.write("        <form action=\"MainPage.jsp\">\n");
      out.write("            <div>Search for a specific product:</div>\n");
      out.write("            <input type=\"text\" name=\"searchName\"/><br/>\n");
      out.write("            <input type=\"submit\" value=\"Search\"/><br/>\n");
      out.write("        </form>\n");
      out.write("        ");
      out.write("\n");
      out.write("        ");

            String prodName = null;
            /* Checks to see if there is a value in the textfield,
             if not
             all records will be retrieved from the database. */
            if ((prodName = request.getParameter("searchName")) == null) {
                prodName = "";
            }
            ResultSet rs;
            /* Uses the value from the textfield to to retrieve the
             specified
             records and display them in a table with the description as
             a hyperlink */
            try {
                statement =
                        connect.getConnection().createStatement();
                        rs = statement.executeQuery("SELECT * FROM products WHERE description LIKE '%" + prodName + "%'");
        
      out.write("\n");
      out.write("        <div><i>Click on the item you wish to add to your cart!</i></div>\n");
      out.write("        <br/>\n");
      out.write("        <table border=\"1\">\n");
      out.write("            <tr style=\"background-color:white\">\n");
      out.write("                <th colspan=\"3\">Products</th>\n");
      out.write("            </tr>\n");
      out.write("            <tr style=\"background-color:white\">\n");
      out.write("                <th>Id</th><th>Description</th><th>Price</th>\n");
      out.write("            </tr>\n");
      out.write("            ");

            while (rs.next()) {
                        out.println("<tr>");
                        out.println("<td>" + rs.getInt("id") + "</td>");
                        String desc = rs.getString("description");
                        out.println("<td><a href =\"MainPage.jsp?addProd="+ desc + "\">" + desc + "</a></td>");
                        out.println("<td>R " + df.format(rs.getFloat("price")) + "</td>");
                    }
                } catch (SQLException sqle) {
                    throw new Exception("SQLException " + sqle);
                }
            
      out.write("\n");
      out.write("        </table><br/>\n");
      out.write("        ");

            String addProd = null;
            boolean exists = false;
            /* checks to see if one of the above hyperlinks were
             clicked */
            if ((addProd = request.getParameter("addProd")) != null) {
                ResultSet rs2;
                try {
                    rs2 = statement.executeQuery("SELECT * FROM products WHERE description='" + addProd + "'");
                    rs2.next();
                    int addId = rs2.getInt("id");
                    /* If the id already exists in the CartBean
                     vector,
                     just add one to the quantity */
                    Vector prodVec = cart.getProducts();
                    for (int j = 0; j < prodVec.size(); j++) {
                        ProductsBean prodBean = (ProductsBean) prodVec.get(j);
                        if (prodBean.getId() == addId) {
                            //Adding to the quantity
                            prodBean.setQuantity(1);
                            exists = true;
                            break;
                        } else {
                            exists = false;
                        }
                    }
                    if (!exists) {
                        //Adding a new item
                        ProductsBean p = new ProductsBean(addId, rs2.getString("description"),rs2.getFloat("price"), 1);
                        cart.setAddProduct(p);
                    }
                } catch (SQLException sqle) {
                    throw new Exception("SQLException " + sqle);
                }
            }
            Vector productsVector = cart.getProducts();
            /* if there is something in the cart the following table
             is
             displayed */
            if (productsVector.size() > 0) {
                float tPrice = 0;
        
      out.write("\n");
      out.write("        <h3>The following things are in your shopping cart</h3>\n");
      out.write("        <table border=\"1\">\n");
      out.write("            <tr style=\"background-color:white\"><th colspan=\"5\">\n");
      out.write("                    Shopping Cart</th></tr>\n");
      out.write("            <tr style=\"background-color:white\">\n");
      out.write("                <th>Id</th>\n");
      out.write("                <th>Description</th>\n");
      out.write("                <th>Price</th>\n");
      out.write("                <th>Qty</th>\n");
      out.write("                <th>Delete?</th>\n");
      out.write("            </tr>\n");
      out.write("            ");

                for (int i = 0; i < productsVector.size(); i++) {
                    ProductsBean pb = (ProductsBean) productsVector.get(i);
            
      out.write(" <tr>\n");
      out.write("                <td>");
      out.print( pb.getId());
      out.write("</td>\n");
      out.write("                <td>");
      out.print( pb.getDescription());
      out.write("</td>\n");
      out.write("                <td>R ");
      out.print( df.format(pb.getPrice()));
      out.write("</td>\n");
      out.write("                <td>");
      out.print( pb.getQuantity());
      out.write("</td>\n");
      out.write("            <form action=\"DeleteFromCart.jsp\">\n");
      out.write("                <td><input type=\"submit\" value=\"Delete\"/></td>\n");
      out.write("                    ");
 /* Uses a hidden value to include the id
                         of the item when the delete button is
                         clicked */
                        out.println("<input type=\"hidden\" name=\"id\" value=\"" + i + "\"/>"); 
                    
      out.write("\n");
      out.write("            </form>\n");
      out.write("            </tr>\n");
      out.write("            ");
 /* calculates the total price of all the
                     items in
                     the cart */
                    tPrice = tPrice + (pb.getPrice() * pb.getQuantity());
                }
      out.write("\n");
      out.write("            <tr><td colspan=\"5\" align=\"right\">\n");
      out.write("                    <b>Total price:</b> R ");
      out.print( df.format(tPrice));
      out.write("\n");
      out.write("                </td></tr>\n");
      out.write("        </table>\n");
      out.write("        ");
 }
      out.write("\n");
      out.write("        <br/><hr/>\n");
      out.write("        ");
      out.write("\n");
      out.write("        <bakery:mt:BakeryTag size=\"2\"/>\n");
      out.write("        <bakery:mt:BakeryTag size=\"4\"/>\n");
      out.write("        <bakery:mt:BakeryTag size=\"2\"/>\n");
      out.write("        <bakery:mt:BakeryTag size=\"4\"/>\n");
      out.write("        <bakery:mt:BakeryTag size=\"2\"/>\n");
      out.write("    </center>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
